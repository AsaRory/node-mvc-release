#
# app基础配置
#
# 路由base路径
APP_ROUTE_PREFIX=/api
# 应用名
APP_NAME=node-mvc
# 协议
APP_SCHEMA=http
# ip
APP_HOST=localhost
# 端口号
APP_PORT=3000

#
# 路径配置
#
#配置controller路径
CONTROLLERS=src/api/controllers/**/*Controller.ts
#配置中间件路径
MIDDLEWARES=src/api/middlewares/**/*Middleware.ts
#配置拦截器路径
INTERCEPTORS=src/api/interceptors/**/*Interceptor.ts
# 配置数据库相关地址。MIGRATIONS 的操作项待遇对代码的一个映射，可以通过js代码自动生成数据库代码。
# 这里我们先手动创建。后期再来学习这个MIGRATIONS怎么操作
# TYPEORM_MIGRATIONS=src/database/migrations/**/*.ts
# TYPEORM_MIGRATIONS_DIR=src/database/migrations
TYPEORM_ENTITIES=src/api/models/**/*.ts
TYPEORM_ENTITIES_DIR=src/api/models


#
# 数据库配置
#
TYPEORM_CONNECTION=mysql
TYPEORM_HOST=localhost
TYPEORM_PORT=3306
TYPEORM_USERNAME=root
TYPEORM_PASSWORD=root
TYPEORM_DATABASE=feg
# 这个配置将会在数据连接的时候对数据库的视图Schema进行自动的Migration。
# 在生产环境的时候应该关掉
TYPEORM_SYNCHRONIZE=true
# 设置打印日志的等级
TYPEORM_LOGGING=error
# 设置日志打印方式
# 可设置的类型有 advanced-console,simple-console,file, debug, 在开启 logging 的情况下，
# logger默认使用类型是 advanced-console, 这个模式会高亮字体和标示sql语句。
TYPEORM_LOGGER=advanced-console

#
# Swagger
#
SWAGGER_ENABLED=true
SWAGGER_ROUTE=/swagger
SWAGGER_FILE=api/swagger.json
SWAGGER_USERNAME=admin
SWAGGER_PASSWORD=1234
